import {Command} from "commander"
import {execSync} from "child_process"
import * as fs from "fs"
import * as path from "path"
import ora from "ora"
import inquirer from "inquirer"
import chalk from "chalk"

const WELCOME_STR = "\tüöÄYou're creating new PNPM Monorepo using BDEV-MONOREPOüöÄ"

export const initMonorepo = new Command("init")
  .description("Initialize monorepo with PNPM Workspace, build 02 main apps NextJS in Frontend and NestJS for backend")
  .action(async () => {

    console.log(WELCOME_STR)
    console.log("HEY: This is a personal project, extensibility is welcomeü´° the monorepo will be created with the following Stacküç∑:")
    console.log("\n  The minimal stack in question:\n\t‚Ä¢ Language: TS(Not JS in the real project)\n\t‚Ä¢ Frontend App: NextJS (latest version)\n\t‚Ä¢ Backend: NestJS (latest version)\n\t‚Ä¢ TailwindCSS V4: YES!\n\t‚Ä¢ Prisma ORM: YES!\n\t‚Ä¢ Monorepo Manager: TurboRepo\n\t‚Ä¢ Package Manager: PNPM, is required!\n")

    const userInputs = await inquirer.prompt([
      {
        type: "input",
        name: "monorepoName",
        message: "Enter your monorepo name:",
        default: "my-monorepo",
        required: true
      },
      {
        type: "input",
        name: "monorepoPath",
        message: "Enter the location of the monorepo on the disk (leave blank for current folder):",
        default: process.cwd(),
      },
      {
        type: "input",
        name: "frontendName",
        message: "Enter the folder name for the frontend app (e.g: web):",
        default: "web",
      },
      {
        type: "input",
        name: "backendName",
        message: "Enter the folder name for the backend app (e.g: api):",
        default: "api",
      },
      {
        type: "confirm",
        name: "usePrisma",
        message: "Would you like to use Prisma in the backend?",
        default: true,
      },
      {
        type: "confirm",
        name: "useGraphQL",
        message: "Would you like to use GraphQL in the backend?",
        default: false,
      },
    ])

    // 	Extracting all user answers from inputs
    const {monorepoName, frontendName, backendName, monorepoPath, useGraphQL, usePrisma} = userInputs

    const spinner = ora("Creation of the monorepo...").start();
    const fullPath = path.join(String(monorepoPath), String(monorepoName))

    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, {recursive: true})
      spinner.succeed("‚úÖ Project mapped successfully.")
    } else {
      spinner.warn("‚ö†Ô∏è The ${fullPath} folder already exists. Using this folder.")
    }
    process.chdir(fullPath)

    spinner.start("Initializing monorepo...")
    execSync("pnpm init", {stdio: "inherit"});

    spinner.start("Updating package.json...");

    const packageJsonPath = path.join(fullPath, "package.json");
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"))
    delete packageJson.main
    packageJson.private = true
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))

    spinner.succeed("package.json file updated")

    fs.writeFileSync("pnpm-workspace.yaml", `packages:\\n  - 'apps/*'\\n  - 'packages/*'\\n`)

    const appsPath = path.join(fullPath, "apps")
    const packagesPath = path.join(packageJsonPath, "packages")

    fs.mkdirSync(appsPath, {recursive: true})
    fs.mkdirSync(packagesPath, {recursive: true})

    spinner.start("Add a .gitignore file for more controller management")
    fs.writeFileSync(".gitignore", `node_modules\nbuild\ndist\n.next\n.env\n.env.local\n`)
    spinner.succeed("‚úÖ .gitignore added.")

    const frontAppPath = path.join(appsPath, frontendName)
    spinner.start(`Creating NextJS frontend application in apps/${frontendName}...`)
    fs.mkdirSync(frontAppPath, {recursive: true})
    process.chdir(frontAppPath)
    execSync(`pnpm dlx create-next-app@latest . --ts --app --import-alias '@/*' --no-tailwind`, {stdio: "inherit"})
    spinner.succeed(`‚úÖ NextJS 15 (App router) App has been created in apps/${frontendName}.`)

    // Trying to install tailwindV4 Ourselves
    spinner.start(`TailwindCSS v4 installation in progress...`)
    process.chdir(frontAppPath)
    execSync("pnpm add tailwindcss@latest", {stdio: "inherit"})
    const globalCSS = `@import "tailwindcss";`
    fs.writeFileSync("app/globals.css", globalCSS)

    const layoutTsx = `
            import './globals.css'
            import type { Metadata } from 'next'
            import React from "react"
            
            export const metadata: Metadata = {
              title: 'Monorepo Frontend',
              description: 'Generated by bdev-monorepo'
            };
            
            export default function RootLayout({
              children,
            }: {
              children: React.ReactNode;
            }) {
              return (
                <html lang="en-us">
                  <body>{children}</body>
                </html>
              );
    }`
    fs.writeFileSync("app/layout.tsx", layoutTsx)
    const updatedRootPageFile = `
        export default function Home() {
          return (
            <div className="min-h-screen bg-blue-500 text-white text-center py-10">
              <h1 className="text-7xl">Next.js App Router App! Text In 7xl.</h1>
            </div>
          )
    `
    fs.writeFileSync("app/page.tsx", updatedRootPageFile)
    spinner.succeed(`‚úÖ TailwindCSS v4 installation done! NextJS frontend application (edited) is ready!`)

    const backendAppPath = path.join(appsPath, backendName)
    spinner.start(`Creating NestJS backend application in apps/${backendName}...`)
    fs.mkdirSync(backendAppPath, {recursive: true})
    process.chdir(backendAppPath)
    execSync(`pnpm dlx @nestjs/cli new . --package-manager pnpm --skip-git --skip-install`, {stdio: "inherit"})
    spinner.succeed(`‚úÖ NestJS backend application is ready dans apps!`)

    await new Promise(resolve => setTimeout(resolve, 2000))
    spinner.info("Checking...")
    await new Promise(resolve => setTimeout(resolve, 2000))

    if (Boolean(usePrisma)) {
      spinner.start("Adding prisma dependencies in backend app")
      process.chdir(backendAppPath)
      execSync("pnpm add @prisma/client", {stdio: "inherit"})
      execSync("pnpm add -D prisma", {stdio: "inherit"})
      execSync("pnpm dlx prisma init --datasource-provider postgres", {stdio: "inherit"})
      spinner.succeed("‚úÖ Prisma installed on backend!")
    }

    await new Promise(resolve => setTimeout(resolve, 2000))
    spinner.info("Checking...")
    await new Promise(resolve => setTimeout(resolve, 2000))

    if (Boolean(useGraphQL)) {
      spinner.info("üìù GraphQL selected ‚Äì installing GraphQL")
    }

    await new Promise(resolve => setTimeout(resolve, 2000))
    spinner.info("Checking...")
    await new Promise(resolve => setTimeout(resolve, 2000))

    spinner.start("TurboRepo installing...")
    process.chdir(fullPath)
    execSync("pnpm add -D turbo", {stdio: "inherit"})
    fs.writeFileSync(
      "turbo.json",
      JSON.stringify(
        {
          pipeline: {
            build: {
              dependsOn: ["^build"],
              outputs: ["dist/**", ".next/**"],
            },
            dev: {
              cache: false,
            },
          },
        },
        null,
        2
      )
    )
    const updatedPackageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"))
    updatedPackageJson.scripts = {
      ...updatedPackageJson.scripts,
      build: "turbo run build",
      dev: "turbo run dev --parallel",
    }
    fs.writeFileSync(packageJsonPath, JSON.stringify(updatedPackageJson, null, 2))

    const backendPackageJsonPath = path.join(backendAppPath, "package.json")
    const backendPackageJson = JSON.parse(fs.readFileSync(backendPackageJsonPath, "utf-8"))
    backendPackageJson.scripts.dev = "nest start --watch"
    delete backendPackageJson.scripts["start:dev"]

    fs.writeFileSync(backendPackageJsonPath, JSON.stringify(backendPackageJson, null, 2))
    spinner.succeed("‚úÖ TurboRepo installed & Ready!")

    spinner.start("Final Step: Installing global dependencies...")
    execSync("pnpm install", {stdio: "inherit"})
    spinner.succeed("‚úÖ Global dependencies installed.")

    await new Promise(resolve => setTimeout(resolve, 2000))
    spinner.info("Checking...")
    await new Promise(resolve => setTimeout(resolve, 2000))
    spinner.succeed("‚úÖ Done.")
    console.log(`\nüéâ Monorepo ${monorepoName} initialized!`);
    console.log(`- Frontend : cd apps/${frontendName} && pnpm dev`);
    console.log(`- Backend : cd apps/${backendName} && pnpm start:dev`);
    console.log(
      "\nü§ù Love this tool? Contribute on GitHub: ",
      chalk.blue.underline("https://github.com/ussfranck/bdev-monorepo")
    );
  })
